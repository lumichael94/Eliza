(let [lmi (new LocalMaryInteface)]
(doseq [i (.getAvailableVoices lmi)]
exit
(let [lmi (new LocalMaryInterface)]
(doseq [i (.getAvailableVoices lmi)]
(println i)))
(:import [marytts LocalMaryInterface MaryInterface])
(nz eliza.core (:import [marytts LocalMaryInterface MaryInterface]))
(ns eliza.core (:import [marytts LocalMaryInterface MaryInterface]))
(let [lmi (new LocalMaryInteface)]
(doseq [i (.getAvailableVoices lmi)]
(println i)))
exit
(:import [marytts LocalMaryInterface]) 
(ns eliza.core
(:import [marytts LocalMaryInterface]))
(ns eliza.core
(:import [marytts LocalMaryInterface]))
(ns eliza.core
(:import [org.hypergraphdb HyperGraph])
(:import [org.hypergraphdb.HGQuery hg]))
(:import [org.hypergraphdb HGQuery])
(:import [org.hypergraphdb HyperGraph])
(ns eliza.core
(:import [org.hypergraphdb HyperGraph]))
(ns eliza.core
(:import [org.hypergraphdb HGQuery]))
HGQuery
(def hg (.hg HGQuery))
(def test (.hg HGQuery))
(def whatisthis (.hg HGQuery))
exit
HGQuery$hg
(.type HGQuery$hg String)
(.type HGQuery$hg java.lang.String)
(.type HGQuery$hg)
(.type HGQuery$hg "hello")
exit
HGQuery*
HGQuery$hg
(.all HGQuery$hg)
(.all HGQuery$hg [])
HGQuery$hg
HGQuery.hg
HGQuery$hg3
(arity HGQuery$hg 0)
exit
HGQuery$hg
HGQuery$hg\type
(HGQuery$hg\type String)
(HGQuery$hg/type String)
exit
(def x [1 2 3 4])
x
type x
(deseq i x (println i))
(doseq i x (println i))
(def x (vector 1 2 3 4))
x
type x
(doseq i x (println i))
exit
(temp-add)
(temp-remove)
(def [vect (add-items ["x" "y" "z"])])
(def vect (add-items ["x" "y" "z"]))
(println vect)
(.getHandle graph (get vect 0))
(get vect 0)
vect
(nth vect 0)
exit
(.get graph "Hello")
exit
(def nine 9)
nine
#'nine
nine
exit
ls
exit
eval
run
exit
(first '())
(partition 2 1 '(1 2 3 4))
(let [arr (partition 2 1 '(1 2 3 4))]
(map #(+(first %)(second %) arr)))
(ns eliza.hypergraphdb)
(HGQuery$hg/type HGPlainLink)
(HGQuery$hg/getAll @graph (HGQuery$hg/type String))
(HGQuery$hg/type String)
(hypergraph/initialize)
(initialize)
(hg-temp-add)
(initalize)
(initialize)
(hg-temp-add)
(keys (ns-publics 'hypergraphdb))
(keys eliza.hypergraphdb)
('keys)
(dir eliza.hypergraphdb)
dir
(dir)
(doc dir)
exit
(ns eliza.hypergraphdb)
(hg-temp-add)
(hg-add-items ["1" "2"])
(map #(.add @graph %) ["1" "2"])
@graph
(initialize)
(hg-add-items ["1" "2"])
(hg-temp-add)
(hg-temp-remove)
(ns eliza.core_interpreter)
(-main)
(hypergraph/hg-find-all String)
(hypergraph/hg-temp-add)
(hypergraph/hg-find-all String)
(new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type get-type) false true false)
(new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type String) false true false)
(def trav (new HGBreadthFirstTraversal node-handle alGen))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(def alGen (new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type String) false true false))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(.hasNext trav)
(hypergraph/hg-bft (.getHandle "Hello") String)
(hypergraph/hg-bft (.getHandle @graph "Hello") String)
(hypergraph/hg-bft "Hello" String)
(use '[clojure.tools.namespace.repl :only (refresh)])
(use 'eliza.hypergraphdb :reload)
(hg-bft "Hello" String)
66  (defn hg-bft [node get-type]                                                                                                                                                                                                                                                  
  1     (let [alGen (new DefaultALGenerator @graph                                                                                                                                                                                                                                
  2                                         (HGQuery$hg/type HGPlainLink)                                                                                                                                                                                                         
  3                                         (HGQuery$hg/type get-type)                                                                                                                                                                                                            
  4                                         false true false)                                                                                                                                                                                                                     
  5           trav (new HGBreadthFirstTraversal (.getHandle @graph node) alGen)                                                                                                                                                                                                   
  6           response []]                                                                                                                                                                                                                                                        
  7       (while (= true (.hasNext trav))                                                                                                                                                                                                                                         
(hg-bft "Hello" String)
(def alGen (new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type String) false true false))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(.getHandle @graph "Hello")
(hg-temp-add)
(ns eliza.hypergraphdb)
(hg-bft "Hello" String)
(hg-temp-add)
(hg-temp-remove)
(hg-find-all String)
(HGQuery$hg/findAll @graph (HGQuery$hg/type String))
(hg-temp-add)
exit
(ns hypergraph)
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(.getHandle @graph "Hello")
exit
(use eliza.hypergraphdb)
(ns eliza.hypergraphdb)
(initialize)
(hg-add-items ["Hello" "," " World" "!"])
(.getHandle @graph "Hello")
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(.get @graph "Hello")
(.getHandle @graph "Hello")
(hg-temp-remove)
(let [items ["Hello"]
vect (hg-add-items)]
(println (.get @graph "Hello")))
(let [items ["Hello"]
vect (hg-add-items items)]
(println (.get @graph "Hello")))
(let [items ["Hello"]
vect (hg-add-items items)]
(println (.getHandle @graph "Hello")))
(.getHandle @graph "Hello")
(hg-temp-add)
(hg-temp-remove)
(hg-temp-add)
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(.getHandle @graph "Hello")
(println (.getHandle @graph "Hello"))
(println (str(.getHandle @graph "Hello")))
(hg-temp-remove)
(hg-temp-add)
(hg-temp-remove)
(hg-temp-add)
(hg-temp-remove)
(hg-temp-add)
(.getHandle @graph "Hello")
(hg-bft "Hello" String)
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(hg-bft "Hello" String)
(def alGen (new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type get-type) false true false))
(def alGen (new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type String) false true false))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph node) alGen))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(while (= true (.hasNext trav)) (conj response (.getSecond (.next trav)))))))
(while (= true (.hasNext trav)) (conj response (.getSecond (.next trav)))
(def response [])
(while (= true (.hasNext trav)) (conj response (.getSecond (.next trav))))
response
(.hasNext trav)
(.getHandle @graph "Hello")
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(def alGen (new DefaultALGenerator @graph (HGQuery$hg/type HGPlainLink) (HGQuery$hg/type String) false true false))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(.hasNext trav)
(while (= true (.hasNext trav))
(conj response (.getSecond (.next trav))))
response
(.hasNext trav)
(def trav (new HGBreadthFirstTraversal (.getHandle @graph node) alGen))
(def trav (new HGBreadthFirstTraversal (.getHandle @graph "Hello") alGen))
(.getSecond (.next trav))
(conj response (.getSecond (.next trav)))
response
(conj response 1)
(first response)
response
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(hg-bft "Hello" String)
:wq
lein run
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(.getHandle "Hello")
(.getHandle @graph "Hello")
exit
(ns eliza.hypergraphdb)
(initialize)
(hg-temp-add)
(hg-bft "Hello" String)
(hg-temp-remove)
(ns eliza.core_interpreter)
(core-initialize)
(hypergraph/hg-temp-add)
exit
(core-initialize)
(hypergraph/hg-temp-add)
(hypergraph/hg-bft "Hello" String)
exit
(-main)
ls
(hypergraph/hg-bft "Hello" String)
exit
(-main)
(ns eliza.hypergraphdb)
(hg-temp-get "Hello")
(hg-temp-add)
(hg-temp-get "Hello")
exit
ls
exit
(graph/hg-temp-remove)
(graph/hg-temp-add ["Hello" "," " World" "!"])
(ns eliza.core_interpreter)
exit
(def x [1 2 3])
(conj x 4)
exit
(def x ["a" "b" "c"])
(reduce #(str %) x)
(reduce #(str 1%) x)
exit
